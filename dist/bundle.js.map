{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./javascript/ball.js","webpack:///./javascript/breakout.js","webpack:///./javascript/game.js","webpack:///./javascript/gameblock.js","webpack:///./javascript/gameover.js","webpack:///./javascript/paddle.js","webpack:///./javascript/welcome.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,eAAe;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBAAsB,sBAAsB;;AAE5C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qCAAqC,WAAW;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,a;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;;;;;;;;;;;;;;;;;ACvMA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;;AAGL;AACA;;AAEA;;;;;;;;;;;;;;;;;ACxDA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,gBAAgB;AACjC,qBAAqB,mBAAmB;AACxC;AACA;AACA;AACA,SAAS;AACT;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA,iDAAiD,UAAU;AAC3D,SAAS;;;AAGT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;;;AAGA;;;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;ACrQA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;;;AAIA;;;;;AAKA;;;;;;;;;;;;;AC7CA;AAAA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA,uE;;;;;;;;;;;;AC1CA;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;;;AAGA;AACA;AACA,K;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;ACtEA;AAAA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA,sE","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./javascript/breakout.js\");\n","const MIN_X = 0\nconst MIN_Y = 0\n\nclass Ball {\n    //Save model data\n    constructor (x, y, vX, vY, container) {\n        this.x = x\n        this.y = y\n        this.velocityX = vX\n        this.velocityY = vY\n        this.width = 15\n        this.collisionHandlers = []\n\n        //Create the element\n        this.el = document.createElement('div')\n        this.el.classList.add('ball')\n        this.el.style.left = this.x\n        this.el.style.top = this.y\n        this.container = container\n\n        //Add element to DOM\n        container.appendChild(this.el)\n\n        this.maxX = this.container.offsetWidth - this.el.offsetWidth\n        this.maxY = this.container.offsetHeight - this.el.offsetHeight\n    }\n\n    get top() {\n        return this.y\n    }\n\n    get bottom() {\n        let bottom = this.y + this.height\n        return bottom\n    }\n    get left() {\n        return this.x\n    }\n\n    get height() {\n        return this.el.offsetHeight\n    }\n   \n\n    move(obstacles) {\n        let ballWidth = this.width\n        console.log(obstacles)\n        \n        let targetX = this.x + this.velocityX\n        let targetY = this.y + this.velocityY\n        var self = this\n\n        function getCollision(obstacles, x, y) {\n            //return an object like \n            //{obstacle, x, y, velocityX, velocityY}\n            \n            //check for collisions on walls and ceilings\n            if(x >= self.maxX){\n                return {\n                    obstacle: null,\n                    x: self.maxX,\n                    y: y,\n                    velocityY: self.velocityY,\n                    velocityX: self.velocityX * -1\n                }\n            }\n            else if(targetX <= MIN_X){\n                return {\n                    obstacle: null,\n                    x: MIN_X,\n                    y: y,\n                    velocityY: self.velocityY,\n                    velocityX: self.velocityX * -1\n                }\n            }\n            if(targetY >= self.maxY) {\n                return {\n                    obstacle: null,\n                    x: x,\n                    y: self.maxY,\n                    velocityY: self.velocityY * -1,\n                    velocityX: self.velocityX\n                }\n            }\n            else if (targetY <= MIN_Y){\n                return {\n                    obstacle: null,\n                    x: x,\n                    y: MIN_Y,\n                    velocityY: self.velocityY * -1,\n                    velocityX: self.velocityX\n                }\n            }\n\n            //check for obstacles\n             //detect blocks\n        let ballLeft = x\n        let ballRight = x + self.height\n        let ballTop = y\n        let ballBottom = y + self.height\n\n        for(let i = 0; i < obstacles.length; i++) {\n            \n            let block = obstacles[i]\n            let blockLeft = block.left\n            let blockRight = block.right\n            let blockTop = block.top\n            let blockBottom = block.bottom\n\n            console.log(blockLeft, blockRight, blockTop, blockBottom)\n            //Are we overlapping?\n            // console.log(ballLeft, ballRight, ballTop, blockTop, blockLeft, blockRight)\n            if( (ballRight >= blockLeft && ballLeft <= blockRight) && \n                (ballBottom >= blockTop && ballTop <= blockBottom)\n               ) {\n                    //simulation\n                    let simX = self.x\n                    let simY = self.y\n                    let stepX = self.velocityX / 10\n                    let stepY = self.velocityY / 10\n                    \n                    for(let step = 0; step < 10; step++) {\n                        simX += stepX\n                        simY += stepY\n                        let simBallLeft = Math.floor(simX)\n                        let simBallTop = Math.floor(simY)\n                        if( simBallLeft >= blockLeft && \n                            simBallLeft + self.width <= blockRight && \n                            (simBallTop === blockBottom || simBallTop + self.height === blockTop)){\n                                //todo: bottom or top collision\n                                console.log('top/bottom collision')\n                                return {\n                                    obstacle: block,\n                                    x: simBallLeft,\n                                    y: simBallTop,\n                                    velocityY: self.velocityY * -1,\n                                    velocityX: self.velocityX\n                                }\n                            }\n                        \n                        if( simBallTop >= blockTop && \n                            simBallTop <= blockBottom && \n                            (simBallLeft + self.width === blockLeft  || simBallLeft  === blockRight)) {\n                                //right/left collision\n                                return {\n                                    obstacle: block,\n                                    x: simBallLeft,\n                                    y: simBallTop,\n                                    velocityY: self.velocityY,\n                                    velocityX: self.velocityX * -1\n                                }\n                            }\n                        \n                    }\n                }\n            }        \n        return null\n    }\n        \n\n        //update the model\n        let collision = getCollision(obstacles, targetX, targetY)\n        \n        if(collision) {\n            // console.log(collision, targetX, targetY)\n            this.x = collision.x\n            this.y = collision.y\n            this.velocityX = collision.velocityX\n            this.velocityY = collision.velocityY\n            if(collision.obstacle){\n                this.triggerCollision(collision)\n            }\n        } else {\n            this.x = targetX\n            this.y = targetY\n        }\n        \n        //update the DOM\n        this.el.style.left = this.x\n        this.el.style.top = this.y\n    \n\n    }\n\n    triggerCollision(collisionData) {\n        this.collisionHandlers.forEach((fn)=>{\n            fn(collisionData)\n        })\n    }\n\n    onCollision(fn){\n        this.collisionHandlers.push(fn)\n    }\n\n    remove() {\n        this.el.remove()\n    }\n\n}\n\nexport default Ball\n","\nimport Game from './game.js'\nimport Welcome from './welcome.js'\nimport Gameover from './gameover.js'\n\nconst VIEW_NAMES = {\n    welcome: 'w',\n    game: 'g',\n    gameover: 'go'\n}\n\nlet views = {}\nlet gameState = {\n        currentView: VIEW_NAMES.welcome\n    }\n\nfunction render(data) {\n    //clean up (call remove on the current view)\n    for(var viewName in views) {\n        if(views[viewName])\n            views[viewName].remove()\n    }\n\n    //Render the appropriate view\n    views[data.currentView].init()\n}\n\nfunction init() {\n    let viewContainer = document.getElementById('view-container')\n    \n    let welcomeView = views[VIEW_NAMES.welcome] = new Welcome(viewContainer)\n    let gameView = views[VIEW_NAMES.game] = new Game(viewContainer)\n    let gameoverView = views[VIEW_NAMES.gameover] = new Gameover(viewContainer)\n\n    //wire up events from views\n    //when the start game button is pushed, change gameState and call render(gameState)\n    welcomeView.onGameStart(function(){\n        gameState.currentView = VIEW_NAMES.game\n        render(gameState)\n    })\n\n     gameoverView.onGameStart(function(){\n        console.log('clicked')\n        gameState.currentView = VIEW_NAMES.game\n        render(gameState)\n    })\n\n     gameView.onGameEnd(function(){\n        gameState.currentView = VIEW_NAMES.gameover\n        render(gameState)\n    })\n    \n\n    render(gameState)\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", init);\n","import Ball from \"./ball.js\"\nimport Paddle from \"./paddle.js\"\nimport GameBlock from \"./gameblock.js\"\n\nconst NUM_COLUMNS = 10\nconst NUM_ROWS = 5\nconst LEFT_KEY_CODE = 37\nconst RIGHT_KEY_CODE = 39\nconst MIN_LEFT_POSITION = 0\nconst MAX_LEFT_POSITION = 880\nconst Y_BALL_START_POSITION = 201\nconst PADDLE_LENGTH = 120\n\nlet blockConfig = []\nfor (let row = 1; row <=NUM_ROWS; row++) {\n    for (let col = 1; col <=NUM_COLUMNS; col++) {\n        blockConfig.push({\n            row: row,\n            col: col\n        })\n    }\n}\n\n\nfunction getRandomBallVelocities(totalVelocity) {\n    let x, y\n    let getRandomFactor = function () {\n        //what is a good const name for 0.7 and 0.3???\n        return Math.random() * 0.4 + 0.3\n    }\n    \n    let xTotalVelocity = Math.floor(getRandomFactor() * totalVelocity)\n    let yTotalVelocity = totalVelocity-xTotalVelocity\n    \n    return {\n        x: xTotalVelocity,\n        y: yTotalVelocity\n    }\n}\n\nclass Game {\n    constructor(container){\n         //Game elements\n        this.container = container\n        this.balls = []\n        this.paddles = []\n        this.blocks = []\n        this.eventHandlers = []\n        this.gameEndListeners = []\n        this.animationFrame = null\n    }\n\n    onGameEnd(fn) {\n        this.gameEndListeners.push(fn)\n    }\n\n    init() {\n        const xStartPosition = function () {\n            return Math.floor(Math.random() * (MAX_LEFT_POSITION - MIN_LEFT_POSITION) + MIN_LEFT_POSITION)\n        }\n        const FIRST_BALL_START_POSITION = {\n            x: xStartPosition(),\n            y: Y_BALL_START_POSITION,\n        }\n\n        this.container.innerHTML = `<div>\n                                        <div class=\"flex-container header-row\">\n                                            <div> \n                                                Score: &nbsp;<span id=\"score\"> 30</span> \n                                            </div>\n                                            <div >\n                                                Speed: <span id=\"speed\">On</span>\n                                            </div>\n                                            <div>\n                                                Sound: <span id=\"sound\">On</span>\n                                            </div>\n                                            <div id=\"hearts\">\n                                                <img src=\"images/heart.svg\" width=\"30\" height=\"30\">\n                                                <img src=\"images/heart.svg\" width=\"30\" height=\"30\">\n                                                <img src=\"images/heart.svg\" width=\"30\" height=\"30\">\n                                            </div>\n                                        </div>\n                                        <div id=\"gameContainer\" class=\"grid\"></div>\n                                        \n                                    </div>`\n        \n    \n\n        let self = this\n        addGameBlocks(blockConfig)\n        addBalls()\n        addPaddles()\n        initUserControls()\n        animateFrames()   \n\n        //ends the game\n        function endGame() {\n            self.gameEndListeners.forEach(function(fn){\n                fn()\n            })\n        }\n        \n        function addGameBlocks(blockData){\n            let blockContainer = document.getElementById('gameContainer')\n            \n            blockData.forEach((data)=>{\n                let block = new GameBlock(data.row, data.col, blockContainer)\n                self.blocks.push(block)\n            })\n        }\n\n        document.querySelectorAll('.box-item').forEach((block)=>{\n            block.addEventListener('click', ()=>{endGame()})\n        })\n        \n\n        function initUserControls(){\n            document.addEventListener('keydown', movePaddleHandler)\n            document.addEventListener('keyup', stopMovingPaddleHandler)\n            self.eventHandlers.push({\n                eventName: 'keydown',\n                handler: movePaddleHandler\n            })\n            self.eventHandlers.push({\n                eventName: 'keyup',\n                handler: stopMovingPaddleHandler\n            })\n        }\n\n        function movePaddleHandler(event, paddles) {\n            let pressedKeyCode = event.keyCode;\n            if(pressedKeyCode !== LEFT_KEY_CODE && pressedKeyCode !== RIGHT_KEY_CODE){\n                return\n            }\n            let isRight = pressedKeyCode === RIGHT_KEY_CODE\n            if(isRight) {\n                self.paddles.forEach(function(paddle){\n                    paddle.movePaddleRight()\n                })\n            } else {\n                self.paddles.forEach(function(paddle){\n                    paddle.movePaddleLeft()\n                })\n            }\n        }\n\n        function stopMovingPaddleHandler (event, paddles) {\n            let pressedKeyCode = event.keyCode;\n            if(pressedKeyCode !== LEFT_KEY_CODE && pressedKeyCode !== RIGHT_KEY_CODE) {\n            return\n            } else {\n                self.paddles.forEach(function(paddle){\n                    paddle.stop()\n                })\n            }\n        }\n\n        function animateFrames() {\n            self.animateFrame = requestAnimationFrame(animateFrames)\n            self.balls.forEach(function(ball){\n                let collision = ball.move(self.blocks.concat(self.paddles))\n                // let collision = ball.move(self.paddles)\n\n                if(collision) {\n                    //get rid of that object\n                }\n                // detectCollision(ball)\n                detectGameOver(ball)\n            })\n            self.paddles.forEach(function(paddle){\n                paddle.move()\n            })\n        }\n\n        function detectGameOver(ball) {\n            let y = ball.bottom\n            if(y >= 615) {\n                endGame()\n            }\n        }\n    \n\n\n        function isVerticalCollision(ball) {\n           \n            let paddleXleft = self.paddles[0].left\n            let paddleXright = paddleXleft + PADDLE_LENGTH                \n            \n            //detect ball hit paddle\n            let hitPaddle = (y >= 581 && paddleXleft <= x && x <=paddleXright)\n                \n            //hit a brick?\n            let hitBrick = y <= 200\n            \n            //hit the ceiling?\n            let hitCeiling = false\n            \n\n            return hitPaddle || hitBrick || hitCeiling\n\n\n        }\n\n      \n        \n        function isHorizontalCollision(ball) {\n            let x = ball.left\n            return (x >= self.container.offsetWidth - ball.width  || x <= 0)\n        }\n       \n        function addBalls() {\n            let gameContainer = document.getElementById('gameContainer');\n            let ballVelocity = getRandomBallVelocities(10)\n            let ball = new Ball(FIRST_BALL_START_POSITION.x, FIRST_BALL_START_POSITION.y, ballVelocity.x, ballVelocity.y, gameContainer)\n            ball.onCollision(onCollision)\n            self.balls.push(ball)\n            \n        }\n\n        function onCollision(collisionData){\n            let obstacle = collisionData.obstacle\n            if(!obstacle.indestructable && obstacle.remove) {\n                obstacle.remove()\n                self.blocks = self.blocks.filter((block)=>{\n                    return block !== obstacle\n                })\n            }\n                \n        }\n\n        function addPaddles(){\n            let gameContainer = document.getElementById('gameContainer');\n            self.paddles.push(new Paddle(400, gameContainer))\n        }\n\n    }\n\n    remove() {\n        this.balls.forEach(function(ball){\n            ball.remove()\n        })\n         this.paddles.forEach(function(paddle){\n            paddle.remove()\n        })\n         this.blocks.forEach(function(block){\n            block.remove()\n        })\n        this.eventHandlers.forEach(function(handlerData){\n            document.removeEventListener(handlerData.eventName, handlerData.handler)\n        })\n\n        this.balls = []\n        this.paddles = []\n        this.eventHandlers = []\n\n        window.cancelAnimationFrame(this.animateFrame)\n        \n\n        //todo - clear scores and other state\n    }\n}\n\nexport default Game\n\n\n\n\n\n","\nconsole.log('gameblock module is working')\nconst COL_CLASS = \"col\"\nconst ROW_CLASS = \"row\"\n\nclass GameBlock {\n    //Save model data\n    constructor (row, col, container) {\n        this.col = col,\n        this.row = row\n\n        this.el = document.createElement('div')\n        this.el.classList.add(\"box-item\", \"block\", COL_CLASS + this.col, ROW_CLASS + this.row)\n\n\n        container.appendChild(this.el)\n    }\n\n    get top() {\n        return this.el.offsetTop\n    }\n\n    get bottom() {\n        return this.el.offsetTop + this.el.offsetHeight\n    }\n    get left() {\n        return this.el.offsetLeft\n    }\n\n    get right() {\n        return this.el.offsetLeft + this.el.offsetWidth\n    }\n\n\n    remove() {\n        this.el.remove()\n    }\n\n\n\n}\n\n\n\n\nexport default GameBlock\n","console.log('gameover is loading')\n\nclass Gameover {\n    constructor (container) {\n        this.container = container\n        this.gameStartListeners = []\n    }\n\n    onGameStart(fn) {\n        this.gameStartListeners.push(fn)\n    }\n\n    init() {\n        this.remove()\n        this.container.innerHTML = `<div class=\"gameover\">\n                                    <h2>GAME OVER</h2>\n                                    <button class=\"playAgainButton\" id=\"play-again-button\">Play Again</button>\n                                    `\n        this.el = document.querySelector('.gameover')\n        this.button = document.querySelector('#play-again-button')\n    \n        this.button.addEventListener('click', ()=>{\n            this.startGame()\n        })\n    }\n\n    startGame() {\n            this.gameStartListeners.forEach(function(fn){\n                fn()\n            })\n    }\n\n    remove() {\n        if(this.el)\n            this.el.remove()\n        if(this.button)\n            this.button.remove()\n    }\n\n}\n\n\nexport default Gameover","const PADDLE_VELOCITY = 7\nconst MIN_X = 0\n\nclass Paddle  {\n    constructor (x,container) {\n        this.x = x\n        this.velocityX = 0\n        this.el = document.createElement('div')\n        this.el.classList.add('paddle')\n        this.el.style.left = this.x\n        this.container = container\n\n        container.appendChild(this.el)\n\n        this.maxX = this.container.offsetWidth - this.el.offsetWidth\n    }\n\n    get indestructable() {\n        return true\n    }\n\n    move() {\n        if(this.velocityX === 0)\n            return\n\n        let newX = this.x + this.velocityX\n\n        if(newX >= this.maxX) {\n            this.x = this.maxX\n        } else if(newX <= MIN_X)\n            this.x = MIN_X\n        else\n            this.x = newX\n\n        \n        //update DOM\n        this.el.style.left = this.x\n    }   \n\n    get left() {\n        return this.x\n    }\n    get top() {\n        return this.el.offsetTop\n    }\n    get right() {\n        return this.el.offsetLeft + this.el.offsetWidth\n    }\n    get bottom() {\n        return this.el.offsetTop + this.el.offsetHeight\n    }\n\n\n    movePaddleRight() {\n        this.velocityX = PADDLE_VELOCITY\n    }\n\n    movePaddleLeft() {\n        this.velocityX = -PADDLE_VELOCITY\n    }\n\n    stop() {\n        this.velocityX = 0\n    }\n\n    remove() {\n        this.el.remove()\n    }\n}\n\nexport default Paddle\n","console.log('welcome is loading')\n\nclass Welcome {\n    constructor (container) {\n        this.container = container\n        this.gameStartListeners = []\n    }\n\n    onGameStart(fn) {\n        this.gameStartListeners.push(fn)\n    }\n\n    init() {\n        this.remove()\n        this.container.innerHTML = `<div class=\"welcome\">\n                                    <h2>WELCOME TO BREAKOUT</h2>\n                                    <button class=\"startButton\" id=\"start-button\">Start Game</button>\n                                    </div>\n                                    `\n        this.el = document.querySelector('.welcome')\n        this.button = document.querySelector('#start-button')\n\n\n        this.button.addEventListener('click', ()=>{\n            this.startGame()\n        })\n    }\n\n    startGame() {\n        this.gameStartListeners.forEach(function(fn){\n            fn()\n        })\n    }\n\n    remove() {\n        if(this.el)\n            this.el.remove()\n        if(this.button)\n            this.button.remove()\n    }\n\n}\n\n\nexport default Welcome"],"sourceRoot":""}